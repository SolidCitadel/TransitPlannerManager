name: CI - Build and Push to ECR

on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 실행

permissions:
  id-token: write # OIDC 토큰을 발급받기 위한 권한
  contents: read  # 리포지토리 코드를 읽기 위한 권한

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 워크플로우를 실행할 가상 환경
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 1. 소스 코드 체크아웃

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # 2. AWS 인증 설정
        id: configure-aws-credentials
        with:
          role-to-assume: ${{ vars.AWS_ROLE }} # 1단계에서 만든 IAM 역할의 ARN
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1 # 3. ECR 로그인

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # ECR 로그인 결과에서 레지스트리 주소 가져오기
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }} # ECR 리포지토리 이름
          IMAGE_TAG: ${{ github.sha }} # Git 커밋 해시 전체를 태그로 사용
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test --no-daemon
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create imagedefinitions.json for CodeDeploy
        run: |
          printf '[{"name":"%s","imageUri":"%s"}]' ${{ vars.CONTAINER_NAME }} ${{ steps.build-image.outputs.image }} > imagedefinitions.json

      - name: Make zip file for CodeDeploy
        run: zip -r deploy.zip . -x ".git/*" ".github/*"

      - name: Upload zip to S3
        id: upload-s3
        env:
          S3_BUCKET: ${{ vars.S3_BUCKET }}
        run: |
          aws s3 cp deploy.zip s3://$S3_BUCKET/deploy.zip
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "s3_key=deploy.zip" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 via CodeDeploy
        env:
          APP_NAME: ${{ vars.CODE_DEPLOY_APP_NAME }}
          GROUP_NAME: ${{ vars.CODE_DEPLOY_GROUP_NAME }}
        run: |
          aws deploy create-deployment \
            --application-name $APP_NAME \
            --deployment-group-name $GROUP_NAME \
            --s3-location bucket=${{ steps.upload-s3.outputs.s3_bucket }},key=${{ steps.upload-s3.outputs.s3_key }},bundleType=zip
